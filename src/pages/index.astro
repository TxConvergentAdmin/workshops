---
import { getCollection } from 'astro:content';
import i18next from '@/i18n';
import Search from '@/components/search';
import PageLayout from '@/components/layouts/PageLayout.astro';
import slateConfig from '~@/slate.config';
import TagFilter from './_tag-filter.jsx'; // Import React component

const postCollection = await getCollection('post', ({ data }) => {
  return import.meta.env.DEV || data.draft !== true;
});

const tagCounts = postCollection.reduce<Record<string, number>>(
  (res, post) => {
    const postTags = post.data.tags;
    if (!postTags || !postTags.length) return res;
    postTags.forEach((tag) => {
      if (tag.trim() === '') return;

      if (res[tag]) {
        res[tag]++;
      } else {
        res[tag] = 1;
      }
    });
    return res;
  },
  {
    [i18next.t('common.all')]: postCollection.length,
  },
);

const priorityOrder = [
  'All', 'Spring-25', 'Fall-24', 'Tech', 'Product', 
  'Design', 'Frontend', 'Backend', 'APIs', 'AI', 'Interviews'
];

const tags = Object.keys(tagCounts)
  .map((tag) => ({
    name: tag,
    count: tagCounts[tag],
  }))
  .sort((a, b) => {
    const indexA = priorityOrder.indexOf(a.name);
    const indexB = priorityOrder.indexOf(b.name);

    if (indexA !== -1 && indexB !== -1) {
      return indexA - indexB; // Sort based on priority order
    }
    if (indexA !== -1) return -1; // Prioritize defined tags
    if (indexB !== -1) return 1;
    return a.name.localeCompare(b.name); // Default alphabetical for others
  });

const posts = [...postCollection]
  .sort((a, b) => b.data.pubDate!.getTime() - a.data.pubDate!.getTime())
  .map((post) => ({
    id: post.id,
    slug: post.slug,
    url: `/workshop/${post.slug}`,
    data: post.data,
  }));
---

<PageLayout>
  <section class="relative mb-16">
    <h3 class="text-[40px] font-semibold leading-tight text-slate12">
      {slateConfig.title}
    </h3>
    <p class="text-xl text-slate10">{slateConfig.description}</p>
    <a href="/schedule" class="text-xl text-[#3ac7f4] underline" rel="noopener noreferrer">View upcoming workshop schedule</a>
    <Search
      client:only="react"
    />
  </section>

  <!-- Render React component for filtering posts based on tag -->
  <TagFilter client:load tags={tags} posts={posts} />
</PageLayout>
